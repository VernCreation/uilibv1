--[[
    Simpleness UI Library
    Created by: [Your Username]
    
    A modern, sleek UI library for Roblox with smooth animations
    and professional styling.
    
    GitHub: https://github.com/[yourusername]/simpleness-ui
    
    Usage:
    loadstring(game:HttpGet("https://raw.githubusercontent.com/[yourusername]/simpleness-ui/main/library.lua"))()
    
    Example:
    local SimplenessUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/[yourusername]/simpleness-ui/main/library.lua"))()
    
    local window = SimplenessUI:CreateWindow({
        Title = "My Script Hub",
        Size = {280, 400}
    })
    
    -- Create sections and elements
    local aimbotSection = window:CreateSection("Aimbot")
    aimbotSection:CreateToggle("Enable Aimbot", false, function(state)
        print("Aimbot:", state)
    end)
    
    local miscSection = window:CreateSection("Misc")
    miscSection:CreateDropdown("Select Option", {"Option 1", "Option 2", "Option 3"}, function(selected)
        print("Selected:", selected)
    end)
    
    miscSection:CreateSlider("FOV", 0, 180, 90, function(value)
        print("FOV:", value)
    end)
--]]

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local SimplenessUI = {}
SimplenessUI.__index = SimplenessUI

-- Main Library
function SimplenessUI:CreateWindow(config)
    local Window = {}
    Window.__index = Window
    
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- Default config
    config = config or {}
    config.Title = config.Title or "Simpleness"
    config.Size = config.Size or {280, 400}
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "SimplenessUI_" .. math.random(1000, 9999)
    screenGui.Parent = playerGui
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Parent = screenGui
    mainFrame.Size = UDim2.new(0, config.Size[1], 0, config.Size[2])
    mainFrame.Position = UDim2.new(0.5, -config.Size[1]/2, 0.5, -config.Size[2]/2)
    mainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.Parent = mainFrame
    mainCorner.CornerRadius = UDim.new(0, 8)
    
    -- Top Bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Parent = mainFrame
    topBar.Size = UDim2.new(1, 0, 0, 30)
    topBar.Position = UDim2.new(0, 0, 0, 0)
    topBar.BackgroundColor3 = Color3.fromRGB(53, 53, 53)
    topBar.BorderSizePixel = 0
    
    local topCorner = Instance.new("UICorner")
    topCorner.Parent = topBar
    topCorner.CornerRadius = UDim.new(0, 8)
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Parent = topBar
    title.Size = UDim2.new(0, 150, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = config.Title
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextSize = 14
    title.Font = Enum.Font.Gotham
    title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Window Controls
    local controls = Instance.new("Frame")
    controls.Parent = topBar
    controls.Size = UDim2.new(0, 50, 0, 12)
    controls.Position = UDim2.new(1, -60, 0.5, -6)
    controls.BackgroundTransparency = 1
    
    local closeBtn = Instance.new("TextButton")
    closeBtn.Parent = controls
    closeBtn.Size = UDim2.new(0, 12, 0, 12)
    closeBtn.Position = UDim2.new(0, 38, 0, 0)
    closeBtn.BackgroundColor3 = Color3.fromRGB(255, 95, 86)
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = ""
    local closeCorner = Instance.new("UICorner")
    closeCorner.Parent = closeBtn
    closeCorner.CornerRadius = UDim.new(1, 0)
    
    local minBtn = Instance.new("TextButton")
    minBtn.Parent = controls
    minBtn.Size = UDim2.new(0, 12, 0, 12)
    minBtn.Position = UDim2.new(0, 0, 0, 0)
    minBtn.BackgroundColor3 = Color3.fromRGB(39, 201, 63)
    minBtn.BorderSizePixel = 0
    minBtn.Text = ""
    local minCorner = Instance.new("UICorner")
    minCorner.Parent = minBtn
    minCorner.CornerRadius = UDim.new(1, 0)
    
    -- Content Frame
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Parent = mainFrame
    contentFrame.Size = UDim2.new(1, 0, 1, -30)
    contentFrame.Position = UDim2.new(0, 0, 0, 30)
    contentFrame.BackgroundTransparency = 1
    contentFrame.ScrollBarThickness = 6
    contentFrame.ScrollBarImageColor3 = Color3.fromRGB(139, 69, 186)
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.BorderSizePixel = 0
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Parent = contentFrame
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 5)
    
    -- Window Functions
    local currentYPos = 10
    local minimized = false
    
    function Window:CreateSection(sectionTitle)
        local Section = {}
        Section.__index = Section
        
        local sectionFrame = Instance.new("Frame")
        sectionFrame.Parent = contentFrame
        sectionFrame.Size = UDim2.new(1, -20, 0, 25)
        sectionFrame.Position = UDim2.new(0, 10, 0, currentYPos)
        sectionFrame.BackgroundTransparency = 1
        sectionFrame.LayoutOrder = currentYPos
        
        local sectionLabel = Instance.new("TextLabel")
        sectionLabel.Parent = sectionFrame
        sectionLabel.Size = UDim2.new(1, 0, 1, 0)
        sectionLabel.BackgroundTransparency = 1
        sectionLabel.Text = sectionTitle
        sectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        sectionLabel.TextSize = 14
        sectionLabel.Font = Enum.Font.GothamBold
        sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        currentYPos = currentYPos + 30
        
        function Section:CreateToggle(toggleName, defaultState, callback)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Parent = contentFrame
            toggleFrame.Size = UDim2.new(1, -20, 0, 25)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.LayoutOrder = currentYPos
            
            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Parent = toggleFrame
            toggleLabel.Size = UDim2.new(0, 180, 1, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Text = toggleName
            toggleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            toggleLabel.TextSize = 12
            toggleLabel.Font = Enum.Font.Gotham
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local toggleBg = Instance.new("Frame")
            toggleBg.Parent = toggleFrame
            toggleBg.Size = UDim2.new(0, 40, 0, 20)
            toggleBg.Position = UDim2.new(1, -45, 0.5, -10)
            toggleBg.BackgroundColor3 = defaultState and Color3.fromRGB(139, 69, 186) or Color3.fromRGB(60, 60, 60)
            toggleBg.BorderSizePixel = 0
            
            local toggleCorner = Instance.new("UICorner")
            toggleCorner.Parent = toggleBg
            toggleCorner.CornerRadius = UDim.new(0, 10)
            
            local toggleBtn = Instance.new("Frame")
            toggleBtn.Parent = toggleBg
            toggleBtn.Size = UDim2.new(0, 16, 0, 16)
            toggleBtn.Position = defaultState and UDim2.new(0, 22, 0, 2) or UDim2.new(0, 2, 0, 2)
            toggleBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            toggleBtn.BorderSizePixel = 0
            
            local btnCorner = Instance.new("UICorner")
            btnCorner.Parent = toggleBtn
            btnCorner.CornerRadius = UDim.new(0, 8)
            
            local isToggled = defaultState
            
            local function toggle()
                isToggled = not isToggled
                
                local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
                
                if isToggled then
                    TweenService:Create(toggleBtn, tweenInfo, {Position = UDim2.new(0, 22, 0, 2)}):Play()
                    TweenService:Create(toggleBg, tweenInfo, {BackgroundColor3 = Color3.fromRGB(139, 69, 186)}):Play()
                else
                    TweenService:Create(toggleBtn, tweenInfo, {Position = UDim2.new(0, 2, 0, 2)}):Play()
                    TweenService:Create(toggleBg, tweenInfo, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}):Play()
                end
                
                if callback then
                    callback(isToggled)
                end
            end
            
            toggleBg.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    toggle()
                end
            end)
            
            currentYPos = currentYPos + 30
            return {
                SetState = function(state)
                    if state ~= isToggled then
                        toggle()
                    end
                end,
                GetState = function()
                    return isToggled
                end
            }
        end
        
        function Section:CreateDropdown(dropdownName, options, callback)
            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Parent = contentFrame
            dropdownFrame.Size = UDim2.new(1, -20, 0, 25)
            dropdownFrame.BackgroundTransparency = 1
            dropdownFrame.LayoutOrder = currentYPos
            
            local dropLabel = Instance.new("TextLabel")
            dropLabel.Parent = dropdownFrame
            dropLabel.Size = UDim2.new(0, 60, 1, 0)
            dropLabel.BackgroundTransparency = 1
            dropLabel.Text = dropdownName
            dropLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            dropLabel.TextSize = 12
            dropLabel.Font = Enum.Font.Gotham
            dropLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local dropBtn = Instance.new("TextButton")
            dropBtn.Parent = dropdownFrame
            dropBtn.Size = UDim2.new(0, 100, 0, 20)
            dropBtn.Position = UDim2.new(1, -105, 0.5, -10)
            dropBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            dropBtn.BorderSizePixel = 0
            dropBtn.Text = options[1] or "Select"
            dropBtn.TextColor3 = Color3.fromRGB(200, 200, 200)
            dropBtn.TextSize = 11
            dropBtn.Font = Enum.Font.Gotham
            
            local dropCorner = Instance.new("UICorner")
            dropCorner.Parent = dropBtn
            dropCorner.CornerRadius = UDim.new(0, 4)
            
            local arrow = Instance.new("TextLabel")
            arrow.Parent = dropBtn
            arrow.Size = UDim2.new(0, 20, 1, 0)
            arrow.Position = UDim2.new(1, -20, 0, 0)
            arrow.BackgroundTransparency = 1
            arrow.Text = "▼"
            arrow.TextColor3 = Color3.fromRGB(139, 69, 186)
            arrow.TextSize = 8
            arrow.Font = Enum.Font.Gotham
            
            local selectedIndex = 1
            
            dropBtn.MouseButton1Click:Connect(function()
                selectedIndex = selectedIndex + 1
                if selectedIndex > #options then
                    selectedIndex = 1
                end
                dropBtn.Text = options[selectedIndex]
                
                if callback then
                    callback(options[selectedIndex])
                end
            end)
            
            currentYPos = currentYPos + 35
            return {
                SetSelected = function(option)
                    for i, v in ipairs(options) do
                        if v == option then
                            selectedIndex = i
                            dropBtn.Text = option
                            break
                        end
                    end
                end
            }
        end
        
        function Section:CreateSlider(sliderName, min, max, default, callback)
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Parent = contentFrame
            sliderFrame.Size = UDim2.new(1, -20, 0, 40)
            sliderFrame.BackgroundTransparency = 1
            sliderFrame.LayoutOrder = currentYPos
            
            local sliderTitle = Instance.new("TextLabel")
            sliderTitle.Parent = sliderFrame
            sliderTitle.Size = UDim2.new(1, 0, 0, 15)
            sliderTitle.BackgroundTransparency = 1
            sliderTitle.Text = sliderName .. ": " .. tostring(default)
            sliderTitle.TextColor3 = Color3.fromRGB(200, 200, 200)
            sliderTitle.TextSize = 12
            sliderTitle.Font = Enum.Font.Gotham
            sliderTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            local sliderTrack = Instance.new("Frame")
            sliderTrack.Parent = sliderFrame
            sliderTrack.Size = UDim2.new(1, -20, 0, 4)
            sliderTrack.Position = UDim2.new(0, 10, 0, 20)
            sliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            sliderTrack.BorderSizePixel = 0
            
            local trackCorner = Instance.new("UICorner")
            trackCorner.Parent = sliderTrack
            trackCorner.CornerRadius = UDim.new(0, 2)
            
            local fillPercent = (default - min) / (max - min)
            local sliderFill = Instance.new("Frame")
            sliderFill.Parent = sliderTrack
            sliderFill.Size = UDim2.new(fillPercent, 0, 1, 0)
            sliderFill.BackgroundColor3 = Color3.fromRGB(139, 69, 186)
            sliderFill.BorderSizePixel = 0
            
            local fillCorner = Instance.new("UICorner")
            fillCorner.Parent = sliderFill
            fillCorner.CornerRadius = UDim.new(0, 2)
            
            local sliderHandle = Instance.new("Frame")
            sliderHandle.Parent = sliderFrame
            sliderHandle.Size = UDim2.new(0, 12, 0, 12)
            sliderHandle.Position = UDim2.new(fillPercent, -6, 0, 16)
            sliderHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            sliderHandle.BorderSizePixel = 0
            
            local handleCorner = Instance.new("UICorner")
            handleCorner.Parent = sliderHandle
            handleCorner.CornerRadius = UDim.new(0, 6)
            
            local currentValue = default
            local dragging = false
            
            local function updateSlider(input)
                local trackPos = sliderTrack.AbsolutePosition
                local trackSize = sliderTrack.AbsoluteSize
                local mouseX = input.Position.X
                
                local relativeX = math.clamp((mouseX - trackPos.X) / trackSize.X, 0, 1)
                currentValue = math.floor(min + (max - min) * relativeX)
                
                sliderTitle.Text = sliderName .. ": " .. tostring(currentValue)
                sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
                sliderHandle.Position = UDim2.new(relativeX, -6, 0, 16)
                
                if callback then
                    callback(currentValue)
                end
            end
            
            sliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateSlider(input)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            currentYPos = currentYPos + 50
            return {
                SetValue = function(value)
                    currentValue = math.clamp(value, min, max)
                    local percent = (currentValue - min) / (max - min)
                    sliderTitle.Text = sliderName .. ": " .. tostring(currentValue)
                    sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    sliderHandle.Position = UDim2.new(percent, -6, 0, 16)
                end,
                GetValue = function()
                    return currentValue
                end
            }
        end
        
        return Section
    end
    
    -- Auto-resize canvas
    local function updateCanvasSize()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, currentYPos + 20)
    end
    
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)
    
    -- Window Controls
    closeBtn.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    minBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            contentFrame.Visible = false
            mainFrame.Size = UDim2.new(0, config.Size[1], 0, 30)
        else
            contentFrame.Visible = true
            mainFrame.Size = UDim2.new(0, config.Size[1], 0, config.Size[2])
        end
    end)
    
    -- Window Dragging
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, 
                                           startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Public methods
    function Window:Destroy()
        screenGui:Destroy()
    end
    
    function Window:SetTitle(newTitle)
        title.Text = newTitle
    end
    
    function Window:SetVisible(visible)
        screenGui.Enabled = visible
    end
    
    return Window
end

-- Example Usage (Remove this section when creating the library file)
--[[
local window = SimplenessUI:CreateWindow({
    Title = "Example Script Hub",
    Size = {280, 400}
})

local aimSection = window:CreateSection("Aimbot")
aimSection:CreateToggle("Enable Aimbot", false, function(state)
    print("Aimbot toggled:", state)
end)

aimSection:CreateToggle("Silent Aim", false, function(state)
    print("Silent Aim toggled:", state)
end)

local espSection = window:CreateSection("ESP")
espSection:CreateToggle("Player ESP", false, function(state)
    print("Player ESP toggled:", state)
end)

local miscSection = window:CreateSection("Misc")
miscSection:CreateDropdown("Teleport Location", {"Spawn", "Base", "Shop"}, function(selected)
    print("Selected location:", selected)
end)

miscSection:CreateSlider("Walk Speed", 16, 100, 16, function(value)
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
    end
end)
--]]

return SimplenessUI
